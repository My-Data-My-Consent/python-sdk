"""
    My Data My Consent - Developer API

    Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@mydatamyconsent.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from com.mydatamyconsent.api_client import ApiClient, Endpoint as _Endpoint
from com.mydatamyconsent.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from com.mydatamyconsent.model.data_provider import DataProvider
from com.mydatamyconsent.model.data_provider_paginated_list import DataProviderPaginatedList


class DataProviderDiscoveryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __v1_data_providers_get(
            self,
            **kwargs
        ):
            """Discover all data providers in My Data My Consent by country and filters.  # noqa: E501

            .  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_data_providers_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                account_type (str): Account type.. [optional]
                document_type (str): Document type.. [optional]
                organization_category (str): Organization category.. [optional]
                page_no (int): Page number.. [optional]
                page_size (int): Page size.. [optional]
                country (str): ISO2 Country code.. [optional] if omitted the server will use the default value of "IN"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DataProviderPaginatedList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.v1_data_providers_get = _Endpoint(
            settings={
                'response_type': (DataProviderPaginatedList,),
                'auth': [],
                'endpoint_path': '/v1/data-providers',
                'operation_id': 'v1_data_providers_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_type',
                    'document_type',
                    'organization_category',
                    'page_no',
                    'page_size',
                    'country',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_type':
                        (str,),
                    'document_type':
                        (str,),
                    'organization_category':
                        (str,),
                    'page_no':
                        (int,),
                    'page_size':
                        (int,),
                    'country':
                        (str,),
                },
                'attribute_map': {
                    'account_type': 'accountType',
                    'document_type': 'documentType',
                    'organization_category': 'organizationCategory',
                    'page_no': 'pageNo',
                    'page_size': 'pageSize',
                    'country': 'country',
                },
                'location_map': {
                    'account_type': 'query',
                    'document_type': 'query',
                    'organization_category': 'query',
                    'page_no': 'query',
                    'page_size': 'query',
                    'country': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_data_providers_get
        )

        def __v1_data_providers_provider_id_get(
            self,
            provider_id,
            **kwargs
        ):
            """Get a Data Provider details.  # noqa: E501

            .  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.v1_data_providers_provider_id_get(provider_id, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str): Provider Id.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DataProvider
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['provider_id'] = \
                provider_id
            return self.call_with_http_info(**kwargs)

        self.v1_data_providers_provider_id_get = _Endpoint(
            settings={
                'response_type': (DataProvider,),
                'auth': [],
                'endpoint_path': '/v1/data-providers/{providerId}',
                'operation_id': 'v1_data_providers_provider_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'provider_id',
                ],
                'required': [
                    'provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                },
                'location_map': {
                    'provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__v1_data_providers_provider_id_get
        )
